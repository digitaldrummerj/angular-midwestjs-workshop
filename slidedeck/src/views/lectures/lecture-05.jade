doctype html
include ../includes/mixins

+page("Lecture 05 - Directives")
  +lecture-title-page("Directives", "Lecture 05")

  section
    h1 Lab Four
    h2 Solution

  section
    h1 Directives

  section
    p
      | At a high level, directives are markers on a DOM element (such as an attribute, element name, or CSS class)
      | that tell AngularJS's HTML compiler ($compile) to attach a specified behavior to that DOM element.

  section
    img.no-style.slide-image(src="/angular-midwestjs-workshop/assets/img/wat_grande.jpg")

  section
    p Angular is the meta-framework to create a new vocabulary(dsl) for the browser. 
    p Directives are the glue between <strong>DOM</strong> and <strong>Scope</strong>.
  
  section
    img.no-style.slide-image(src="/angular-midwestjs-workshop/assets/img/highfive.gif")

  section
    p $compile can match directives based on element names,
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;my-cool-directive&gt; &lt;/my-cool-directive&gt;

        </code>
    p attributes,
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;div my-cool-directive&gt; &lt;/div&gt;

        </code>
    p class names,
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;div class="my-cool-directive"&gt; &lt;/div&gt;

        </code>
    p and html comments.
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;!-- directive: my-cool-directive --&gt;

        </code>

  section
    p Below is an example of declaring a directive and referring to it in HTML.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', [
          //...
        ]);

      </code>
    pre.
      <code class="html" data-trim>
      &lt;div my-cool-directive&gt;&lt;/div&gt;

      </code>

  section
    h2 Directive Configuration

  section
    h3 Template

  section
    p You can add inline templates for very small templates or provide a url for larger templates.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            template: '&lt;div&gt;{{helloWorld}}&lt;/div&gt;'
            
            or

            templateUrl: 'templates/directives/my-cool-directive.html'
          };
        });

      </code>

  section
    h3 Compile

  section
    p If you need modify the directive's template, use the compile function. 

  section
    p The compile function 
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            compile : function (tElement, tAttrs, transclude) {
              tElement.addClass('hipster');

              return {
                pre: function preLink (scope, iElement, iAttrs, controller) { ... },
                post: function postLink (scope, iElement, iAttrs, controller) { ... }
              }
            }
          };
        });
      
      </code>

  section
    h3 Linking

  section
    p Directives that want to modify the element or scope typically use the link option.

  section
    p Inside the link function, you can initialize scope, watch properties, modify element attributes, and etc.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            scope: {
              myVar: '='
            },
            link: function postLink (scope, element, attrs) {
              scope.updatedCount = 0;
              scope.$watch('myVar', function() {
                scope.updatedCount += 1;
                var contents = 'myVar updated ' +
                  scope.updatedCount + ' times.';
                element.text(contents);
              });
            }
          };
        });

      </code>

  section
    p When do I use compile vs. linking?
    ul
      li Compile is used to modify the directive's <strong>template</strong>.
      li Link has access to <strong>Scope</strong>.
  
  section
    h3 Restrict

  section
    p
      | When you create a directive, it is restricted to attribute only by default. In order to create
      | directives that are triggered by element or class name, you need to use the restrict option.
    ul
      li.
        <strong>A</strong> - Matches attribute name.
      li.
        <strong>E</strong> - Matches element name.
      li.
        <strong>C</strong> - Matches class name.
      li.
        <strong>M</strong> - Matches HTML comment.
  
  section
    p The directive below would match elements, attributes, CSS class names, or HTML comments.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            restrict: 'AECM'
          };
        });

      </code>

  section
    h3 Replace
    
  section
    p When replace is true, the template will replace the element the directive is specified on.
    p When replace is false, the template will be placed inside the element the directive is specified on.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            replace: true
          };
        });

      </code>

  section
    h3 Scope

  section
    p By default, a directive uses the parent scope.
    p This can be problematic because it could set or change values that already exist, breaking encapsulation.

  section
    p
      | What we want to be able to do is separate the scope inside a directive from the scope outside, and
      | then map the outer scope to a directive's inner scope.

  section
    p The directive below will have an isolate scope that is not mapped to anything in the parent scope (completely isolated)
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            scope: true
          };
        });

      </code>

  section
    p When we want to map the outer scope to the directives inner scope, we use a scope configuration object.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective',function() {
          return {
            scope: {
              // ...
            }
          };
        });

      </code>

  section
    p There are multiple ways to map parent scope to the isolate scope.
    p Lets start with the most common, '=' or two way binding.

  section
    p This will instruct Angular to bind the value supplied with the element attribute "some-attribute" to the isolate scope.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            scope: {
              someAttribute: '='
            }
          };
        });

      </code>
    pre.
      <code class="html" data-trim>
      &lt;div my-cool-directive some-attribute="myAttribute"&gt;&lt;/div&gt;

      </code>

  section
    p This will create a two way mapping between the parent scope and the isolate scope.
    p Changes made in the parent scope are reflected in the isolate scope and visa versa.
    img.no-style.slide-image(src="/angular-midwestjs-workshop/assets/img/scope.png")

  section
    p The second type of binding in the attribute value or expression binding '@'.

  section
    p
      | The '@' binding maps the attribute value (string) in the context of the parent scope to the isolate scope.

  section
    p If scope.value was 5, the value of attributeValue in the isolate scope would be "11" (string).
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective',function() {
          return {
            scope: {
              attributeValue: '@'
            }
          };
        });

      </code>
    pre.
      <code class="html" data-trim>
      &lt;div my-cool-directive attribute-value="{{ scope.value + 6 }}" &gt;&lt;/div&gt;

      </code>

  section
    p Lastly, we have function binding or '&'
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            scope: {
              someCalculation: '&'
            },
            link: function (scope, elem, attrs) {
              // something happens
              scope.someCalculation({amount: 5});
            }
          };
        });

      </code>
    pre.
      <code class="html" data-trim>
      &lt;div my-cool-directive some-calculation="calculateSomeValue(amount)" &gt;&lt;/div&gt;

      </code>

  section
    h3 Transclude

  section
    p To use transclusion with a directive, just add the transclude option to the directive configuration.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myFrameDirective', function() {
          return {
            transclude: true
          };
        });

      </code>

  section
    p The transclude option changes the way scopes are nested.
    p The best way to look at transclusion is as a picture frame.
    img.no-style.slide-image(src="/angular-midwestjs-workshop/assets/img/transclude-frame.png")

  section
    p First, lets look at using a transclude directive
    br
    pre.
      <code class="html" data-trim>
      &lt;div my-frame-directive &gt;
        &lt;p&gt;{{outerScopeVariable}}&lt;/p&gt;
      &lt;/div&gt;

      </code>

  section
    p Now, lets look at the template for a transclusion directive
    br
    pre.
      <code class="html" data-trim>
      &lt;div class="{{isolateScopeVariable}}"&gt;
        &lt;div ng-transclude &gt;&lt;/div&gt;
      &lt;/div&gt;

      </code>
    p Angular will place the contents of the directive
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;p&gt;{{outerScopeVariable}}&lt;/p&gt;

        </code>
    p in the place of the element with the ng-transclude attribute

  section
    p After compilation, the final DOM will look like
    br
    pre.
      <code class="html" data-trim>
      &lt;div class="{{isolateScopeVariable}}"&gt;
        &lt;p&gt;{{outerScopeVariable}}&lt;/p&gt;
      &lt;/div&gt;

      </code>

  section
    p Let's look at the picture frame again.
    img.no-style.slide-image(src="/angular-midwestjs-workshop/assets/img/transclude-frame.png")

  section
    img.no-style.slide-image(src="/angular-midwestjs-workshop/assets/img/mind-blown.gif")      

  section
    h1 Unit Testing
    h2 Continued

  section
    p Now that we've learned about how to create our own directives, we'll need to learn how we can test them.

  section
    p First, we'll need to make sure that we inject the $compile service, our directive module, and any templates used by the directive.
    br
    pre.
      <code data-trim>
      beforeEach(module(
        'app.directives',
        'assets/templates/directives/my-cool-directive.html'
      ));

      beforeEach(inject(function($rootScope, _$compile_) {
        $compile = _$compile_;
        $scope = $rootScope.$new();
      }));

      </code>

  section
    p
      | Then, we'll create our mock 
      code $scope
      | , element, and finally use the 
      code $compile
      |  service to compile and link our directive.
    br
    pre.
      <code data-trim>
      beforeEach(function () {
        // Notice that we can use properties
        // on our mock scope with the directive below
        $scope.myColor = 'red';

        // Create a jqLite element with our directive
        element = angular.element(
          '&lt;div my-cool-directive color="myColor"&gt;' +
          '&lt;/div&gt;'
        );

        // This will compile the element with our mock scope
        $compile(element)($scope);
      });

      </code>

  section
    p In a real browser, scope digests are automatically triggered by AngularJS in reaction to various events.

  section
    p There are no such events during automated testing so we'll need to force a scope digest.

  section
    p The forced digest cycle will propagate changes between the parent scope and isolate scope.
    br
    pre.
      <code data-trim>
      beforeEach(function () {
        $scope.myColor = 'red';

        element = angular.element(
          '&lt;div my-cool-directive color="myColor"&gt;' +
          '&lt;/div&gt;'
        );

        $compile(element)($scope);

        // This propagate the value of $scope.myColor with the
        // directive's scope.color
        $scope.$digest();
      });

      </code>

  section
    p Now we're ready to start testing the expected behavior of the directive.

  section
    p Lets assume that myCoolDirective sets the CSS attribute  "color" on the element based on myColor.
    br
    pre.
      <code data-trim>
      describe('my cool directive', function() {
        it('should set the element color', function () {
          expect(element.css('color')).to.equal('red');
        });

        it('should respond to changes', function () {
          // Notice that we're forcing a digest by using apply
          $scope.$apply(function() {
            $scope.myColor = 'blue';
          });
          expect(element.css('color')).to.equal('blue');
        });
      });

      </code>

  section
    p What if we want to test something that's not directly accessable through the DOM?

  section
    p AngularJS provides jqLite functions that expose the parent scope and isolate scope of a particular element

  section
    p
      | The non-isolate scope can be accessed by calling
      code element.scope()

  section
    p
      | The isolate scope can be accessed by calling
      code element.isolateScope()

  section
    p Here, we can validate the binding between the parent and isolate scope.
    br
    pre.
      <code data-trim>
      describe('my cool directive', function() {
        it('should have bound scopes', function () {
          $scope.$apply(function() {
            $scope.myColor = 'blue';
          });
          expect(element.isolateScope().color).to.equal('blue');
        });
      });

      </code>

  section
    h2 Lab 8 - Directives
