doctype html
include ../includes/mixins

+page("Lecture 01 - Project Layout and Development Tools")
  +lecture-title-page("Project Layout and Development Tools", "Lecture 01")

  section
    h1 NPM

  section
    p
      strong  NPM
      |  is the official package manager for Node.js.

  section
    p NPM runs through the command line and manages dependencies for an application.

  section
    p It also allows users to install Node.js applications that are available on the NPM registry.

  section
    p For those who are familiar with dependency management tools and artifact repositories like Maven and Maven Central, NPM is similar.

  section
    p One distinct difference between the two is that NPM does not manage build processes like Maven does.

  section
    p Most, if not all, Node.js projects contain a
      strong  package.json
      |  file in the root project.

  section
    p This file exposes metadata about your application as well as its dependencies.

  section
    pre.
      <code class="json" data-trim>
      {
        "name": "my-project",
        "version": "0.0.1",
        "description": "My Cool Node Project",
        "main": "index.js",
        "author": "Sterling Archer",
        "dependencies": {
          "grunt": "0.4.2"
        }
      }

      </code>

  section
    p When checking out a fresh project from GitHub, simply run
      strong  'npm install'
      |  to install all the dependencies required to run the project.

  section
    h1 Bower

  section
    p
      strong  Bower
      |  is a package manager for front end dependencies.

  section
    p We'll be using Bower in our project to manage libraries that we use in our Angular application, such as Angular itself.

  section
    p Like NPM, Bower requires a
      strong  bower.json
      |  file in the root of the project that specifies metadata about our project as well as its dependencies.

  section
    pre.
      <code class="json" data-trim>
      {
        "name": "my-project",
        "version": "0.0.1",
        "description": "My Cool Node Project",
        "author": "Pam Poovey",
        "dependencies": {
          "angular": "~1.2.14"
        }
      }

      </code>

  section
    p When checking out a fresh project from GitHub, simply run
      strong  'bower install'
      |  to install all the client-side dependencies required by the client application.

  section
    p Aside from using NPM and Bower to install our dependencies, we won't focus much on NPM or Bower in this training class.

  section
    p You can visit the NPM and Bower websites to learn more about them.
    p
      a(href="http://bower.io") bower.io
    p
      a(href="https://www.npmjs.org") npmjs.org

  section
    h1 Grunt

  section
    p
      strong  Grunt
      |  is a JavaScript Task Runner.

  section
    p We'll be using Grunt to automate many of the project build tasks associated with a web application.

  section
    p
      | The less work we have to do when performing repetitive tasks like minification, compilation, unit
      | testing, linting, etc., the easier our life becomes.

  section
    p
      | Grunt, by itself, is a framework designed for running tasks.  It also provides a lot of common
      | utilities needed for performing things like filesystem operations.


  section
    p
      | We'll be using Grunt plugins created by individuals and the community that help automate tasks that are
      | specific to our application.

  section
    h1 Project Layout

  section
    p In this training class, you'll be building a Angular application that tracks employee timesheets across different projects.

  section
    p To help speed things along so we can focus on the really important parts like Angular, we've created the base project structure for you.

  section
    p Let's take a look.

  section
    h1 Lab 01
    h2 Application Setup
