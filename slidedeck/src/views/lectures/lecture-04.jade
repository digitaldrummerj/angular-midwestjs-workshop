doctype html
include ../includes/mixins

+page("Lecture 04 - Modules, Routing, and Resources")
  +lecture-title-page("Modules, Routing, and Resources", "Lecture 04")

  section
    h1 Lab Three
    h2 Solution

  section
    h1 Modules
    h2 Continued

  section
    p A
      strong  module
      |  consists of configuration and run blocks which get applied to the application during the bootstrap process.

  section
    p In its simplest form, the module consists of two kinds of blocks.

  section
    h2 Configuration Blocks

  section
    p
      strong  Configuration blocks
      |  get executed during the provider registrations and configuration phase.

  section
    p Only providers and constants can be injected into configuration blocks.

  section
    p This is to prevent accidental instantiation of services before they have been fully configured.

  section
    h2 Run Blocks

  section
    p
      strong  Run blocks
      |  get executed after the injector is created and are used to kickstart the application.

  section
    p Only instances and constants can be injected into run blocks.

  section
    p This is to prevent further system configuration during application run time.

  section
    p A run block is the code needed to kickstart the application.

  section
    p It is executed after all of the services have been configured and the injector has been created.

  section
    p Run blocks are the closest thing in Angular to the main method.

  section
    p Example of run and config.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .config(function(injectables) {

        })
        .run(function(injectables) {

        });

      </code>

  section
    h1 Application Routing

  section
    p Everyone is familiar with typical web page development.  When you click a link, it takes you to a new page.

  section
    p When building single page applications, like ours, this presents a problem.

  section
    p The process of reloading a page adds significant overhead, especially considering we already have everything we need to display every page.

  section
    p This is where the Angular
      strong  $route
      |  service comes into play.

  section
    p The
      strong  $route
      |  service is used for deep-linking URLs to controllers and views (HTML partials).

  section
    p It watches
      strong  $location.url()
      |  and tries to map the path to an existing route definition.

  section
    p When the location changes, the
      strong  $route
      |  service will load the HTML partial for the page and then compile and link the associated controller to it.

  section
    p We use the
      strong  $routeProvider
      |  in our module's configuration block to instruct the
      strong  $route
      |  service to match URLs with their associated templates and controllers.

  section
    p Let's configure some routes.

  section
    p This configures the
      strong  $route
      |  service so that when the browser URL is
      strong  /projects
      | , load the template, compile it, and link the project controller on it.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .config(function($routeProvider) {
          $routeProvider
            .when('/projects', {
               templateUrl: 'assets/templates/app/projects/index.html',
               controller: 'ProjectCtrl'
            });
        });

      </code>

  section
    p We can add additional configurations by chaining
      strong  'when'
      |  statements.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .config(function($routeProvider) {
          $routeProvider
            .when('/projects', {
               templateUrl: 'assets/templates/app/projects/index.html',
               controller: 'ProjectCtrl'
            })
            .when('/employees', {
               templateUrl: 'assets/templates/app/employees/index.html',
               controller: 'EmployeeCtrl'
            });
        });

      </code>

  section
    p What about when a user enters a URL that is not in the configuration?

  section
    p Simply add an
      strong  'otherwise'
      |  statement to the configuration chain to redirect the user to a default page.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .config(function($routeProvider) {
          $routeProvider
            .when('/projects', {
               templateUrl: 'assets/templates/app/projects/index.html',
               controller: 'ProjectCtrl'
            })
            .otherwise({
               redirectTo: '/projects'
            });
        });

      </code>

  section
    p Now that we've configured the
      strong  $route
      |  service, we need to tell it where to display the matched templates in the DOM.

  section
    p For this, we'll use the
      strong  ngView
      |  directive.
    br
    pre.
      <code class="html" data-trim>
      &lt;body&gt;
        &lt;div ng-view&gt;&lt;/div&gt
      &lt;/body&gt;

      </code>

  section
    h1 Resources

  section
    p A
      strong  resource
      |  is an abstract term for the data returned by some RESTful endpoint.

  section
    p Since REST has an established pattern, we can use that pattern to simplify how we send and receive data with our RESTful API.

  section
    p Angular provides the
      strong  $resource
      |  service to help us with that.

  section
    p The
      strong  $resource
      |  service is a factory to create a resource object that lets you interact with RESTful server-side data sources.

  section
    p The returned resource object has action methods which provide high-level behaviors without the need to interact with the low level
      strong  $http
      |  service.

  section
    p By default, the
      strong  $resource
      |  class object is configured with the following methods.
    br
    pre.
      <code class="js" data-trim>
      {
        'get':    {method:'GET'},
        'save':   {method:'POST'},
        'query':  {method:'GET', isArray:true},
        'remove': {method:'DELETE'},
        'delete': {method:'DELETE'}
      }

      </code>

  section
    p Calling these methods invoke a
      strong  $http
      |  request with the specified HTTP method, destination and parameters.

  section
    p When the data is returned from the server, the object is then an instance of the resource class.

  section
    p The actions save, remove and delete are available on the resource instance as methods with the $ prefix.

  section
    p Let's create a resource.

  section
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .controller('EmployeeCtrl', function($scope, $resource) {
          var Employee = $resource(
            '/employees/:employeeId',
            {employeeId:'@id'}
          );
        });

      </code>

  section
    p The first argument specifies the URL of the resource.  You can use parameters to substitute variables in those URL's.
    br
    .text-center
      pre.
        <code class="js" data-trim>
        var Employee = $resource('/employees/:employeeId');

        </code>

  section
    p The second argument specifies how
      strong  $resource
      |  should substitute those URL variables with the options passed in.
    br
    pre.
      <code class="js" data-trim>
      var Employee = $resource(
        '/employees/:employeeId',
        {employeeId:'@id'}
      );

      </code>
    p Here, the
      strong  'id'
      |  property in the options object will be substituted in the place of
      strong  :employeeId
      |  in the resource URL.

  section
    p It's important to note here that Employee is a resource class.  We will use the resource class to create new instances of the resource.

  section
    p Now that we've defined our resource, we can use the Employee resource class to get an instance of an employee.
    br
    .text-center
      pre.
        <code class="js" data-trim>
        $scope.employee = Employee.get({id: 23});

        </code>
    p What will the HTTP request look like for this action?

  section
    p
      strong  GET /employees/23

  section
    p It is important to realize that invoking a
      strong  $resource
      |  object method immediately returns an empty reference.

  section
    p Once the data is returned from the server the existing reference is populated with the actual data.

  section
    p We can supply a callback function to be executed once the reference is populated with data.

  section
    p Once we have a populated instance of the employee resource, we can change its data and call actions on it.
    br
    pre.
      <code class="js" data-trim>
      $scope.employee = Employee.get({id: 23}, function() {
        $scope.employee.name = 'Lana';
        $scope.employee.$save();
      });

      </code>
    p What will the HTTP request look like for
      strong  $scope.employee.$save()
      | ?

  section
    p
      strong POST /employees/23

  section
    p
      | In Lab 4, we've wrapped the
      strong  $resource
      |  service with an api and data service to even further simplify how you will communicate with the API.

  section
    h1 Unit Testing
    h2 Continued

  section
    p
      | During unit testing, we want our unit tests to run quickly and have no external dependencies so we donâ€™t want
      | to send network requests to a real server.

  section
    p All we really need is to verify whether a certain request has been sent or not.

  section
    p Alternatively, we can just let the application make requests, respond with pre-trained responses, and assert that the end result is what we expect it to be.

  section
    p To help with this, Angular provides the
      strong  $httpBackend
      |  mock service.

  section
    p The
      strong  $httpBackend
      |  mock service is a fake HTTP backend implementation suitable for unit testing applications that use the
      strong  $http
      |  service.

  section
    p There are two ways to specify what test data should be returned as HTTP responses by the mock backend:
    ul
      li.
        <strong>$httpBackend.expect</strong> - specifies a request expectation
      li.
        <strong>$httpBackend.when</strong> - specifies a backend definition

  section
    h3 Expectations
    p Request expectations provide a way to make assertions about requests made by the application and define responses for those requests.

  section
    p The test will fail if the expected requests are not made or they're made in the wrong order.

  section
    h3 Backend definitions
    p Backend definitions allow you to define a fake backend for your application that will not assert a specified request was made. It ONLY returns the configured response.

  section
    p The test will pass whether or not the request gets made during testing.

  section
    p The
      strong  $httpBackend
      |  used in production always responds to requests asynchronously.

  section
    p  If we preserved this behavior in unit testing, we'd have to create asynchronous unit tests.

  section
    p Asynchronous unit tests are hard to write, follow, and maintain.

  section
    p The mock can't respond synchronously either; that would change the execution of the code being tested.

  section
    p For this reason, the mock
      strong  $httpBackend
      |  service has a
      strong  flush()
      |  method.

  section
    p The
      strong  flush()
      |  method allows you to explicitly flush pending requests.

  section
    p Let's write a test that uses the mock
      strong  $httpBackend
      |  service.

  section
    p For brevity, the test setup has been omitted.
    br
    pre.
      <code class="js" data-trim>
      describe('a controller that uses $http', function() {
        it('should be able to make a network request', function () {
          $httpBackend.expect('GET', '/users');
          scope.getUsers();
          $httpBackend.flush();
        });
      });

      </code>

  section
    p We can also specify responses for our mock network requests.
    br
    pre.
      <code class="js" data-trim>
      describe('a controller that uses $http', function() {
        it('should be able to handle errors', function () {
          $httpBackend.expect('GET', '/users').respond(500);
          scope.getUsers();
          $httpBackend.flush();
          // expectations for handling errors
        });
      });

      </code>

  section
    p Also, we can provide data to send back in our mock responses to our network requests.
    br
    pre.
      <code class="js" data-trim>
      describe('a controller that uses $http', function() {
        it('should put the users on scope', function () {
          $httpBackend.expect('GET', '/users').respond(200, [{id:5}]);
          scope.getUsers();
          $httpBackend.flush();
          expect(scope.users[0].id).to.equal(5);
        });
      });

      </code>

  section
    h1 Lab Four
    h2 Modules, Resources, Routing, and Controllers
