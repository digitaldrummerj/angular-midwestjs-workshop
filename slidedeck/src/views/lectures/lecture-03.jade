
doctype html
include ../includes/mixins

+page("Lecture 03 - Karma and Unit Testing")
  +lecture-title-page("Karma and Unit Testing", "Lecture 03")

  section
    h1 Lab Two
    h2 Solution

  section
    h1 Unit Testing

  section
    p
      | JavaScript is a dynamically typed language which comes with great power of expression,
      | but it also comes with almost no help from the compiler.

  section
    p For this reason any code written in JavaScript needs to come with a strong set of tests.

  section
    p The Angular team has built many features into Angular that make testing your applications easy.

  section
    h3 There is no excuse for not testing

  section
    p You'll more than likely spend half of your time in labs testing your solutions.
    p ...and this is a good thing.

  section
    h1 Karma

  section
    h2 Karma
    ul
      li Essentially a tool that spawns a web server to execute your
        strong  source code
        |  against your
        strong  test code
        |  within
        strong  each of the browsers
        |  you configure

  section
    p
      | The results for each test against each browser are examined and displayed via the command line
      | to the developer such that they can see which browsers and tests passed or failed.

  section
    p We'll use Karma with Grunt to integrate tests directly into our development workflow.

  section
    h1 Jasmine

  section
    p Jasmine is a
      strong  behavior-driven development (BDD)
      |  framework for testing JavaScript code.

  section
    p Behavior driven development uses examples to illustrate behavior.

  section
    h2 Suites

  section
    p A test suite begins with a call to the global Jasmine function
      strong  describe()
      |  with two parameters: a string and a function.

  section
    p
      | The string is a name or title for a spec suite â€“ usually what is being tested and function is a block of code
      | that implements the suite.

  section
    pre.
      <code class="js" data-trim>
      describe("Some feature", function() {

      });

      </code>

  section
    h2 Specs

  section
    p A spec contains one or more expectations that test the state of the code.

  section
    p Specs are defined by calling the global Jasmine function
      strong  it()
      |  which, like
      strong  describe()
      | , takes a string and a function.

  section
    p The string is the title of the spec and the function is the spec, or test.

  section
    pre.
      <code class="js" data-trim>
      describe("Some feature", function() {
        it('should behave in a certain way', function() {

        });
      });

      </code

  section
    p You can nest describe blocks to elaborate on what is being tested.

  section
    pre.
      <code class="js" data-trim>
      describe("Some feature", function() {
        it('should behave in a certain way', function() {

        });
        describe("component", function() {
          it('should do what we expect', function() {

          });
        });
      });

      </code>

    p Some feature should behave a certain way.
    p Some feature component should do what we expect.

  section
    p Jasmine also provides us with test life-cycle functions that we can use to set up and/or tear down our test environment:
      strong  beforeEach()
      |  and
      strong  afterEach()

  section
    h2 Expectations

  section
    p Expectations are built with the function
      strong  expect()
      |, which takes a value, called the
      strong  actual
      |.

  section
    p It is chained with a
      strong  matcher
      |  function, which takes the expected value.

  section
    p Each matcher implements a boolean comparison between the actual value and the expected value.

  section
    p The matcher is responsible for reporting to Jasmine if the expectation is true or false.

  section
    pre.
      <code class="js" data-trim>
      describe("Some feature", function() {
        it('should behave in a certain way', function() {
          expect(true).to.equal(true);
          expect({}).to.be.ok; // Ok checks if the actual is defined
        });
      });

      </code>

  section
    h1 Angular Mocks

  section
    p
      | Instead of our tests talking to real services, it will often suffice to speak to the
      strong  mock
      |  versions of the services, which will respond to calls accurately, but rather unintelligently.

  section
    p
      | We use mocks because if we relied on a real service writing real data, then it may interfere with the
      | execution of our test runner in its own potentially sandboxed environment.

  section
    p Let's use the
      strong  $location
      |  service as an example.

  section
    p
      | If one of our tests changes the location of the address bar during testing, this could potentially disrupt
      | the entire test process.

  section
    p Angular provides tools and services to mock different kinds of components when testing.

  section
    p Let's start by mocking a module that we'll be testing.

  section
    p Angular provides
      strong  angular.mock.module
      |  (aliased as 'module' on window) to mock Angular modules

  section
    pre.
      <code class="js" data-trim>
      beforeEach(module(
        'app.controllers'
      ));

      </code>

    p Why do we mock the app.controllers module inside a
      strong  beforeEach()
      |  statement?

  section
    p We want to make sure that we're starting with a blank slate so that changes made by other tests don't interfere with the current test.

  section
    p Now that we've mocked the module that contains the component we wish to test, we need to mock the component itself.

  section
    p More than likely, our component will have dependencies that are required to test it.

  section
    p We use
      strong  angular.mock.inject
      |  (aliased as 'inject' on window) to inject mock dependencies.

  section
    pre.
      <code class="js" data-trim>
      var controller, scope;

      beforeEach(module(
        'app.controllers'
      ));

      beforeEach(
        inject(
          function($rootScope, $controller) {
            scope = $rootScope.$new();
            controller = $controller("MainCtrl", {
              $scope: scope
            });
          }
        )
      );

      </code>

    p Notice that we use an additional beforeEach here to make sure each test has a fresh controller.

  section
    p Lets break this down and discuss what's going on in each step.

  section
    p To instantiate our controller for testing, we'll need to inject the
      strong  $controller
      |  service and
      strong  $rootScope
      |  service.

  section
    p The inject function is going to inject
      strong  $rootScope
      |  and the
      strong  $controller
      |  services that we need to build an instance of our controller.
    br
    pre.
      <code class="js" data-trim>
        inject(
          function($rootScope, $controller) {

          }
        );

      </code>

  section
    p Now, we're going to create a new scope from the root scope that we'll supply to our controller.
    br
    pre.
      <code class="js" data-trim>
      inject(
        function($rootScope, $controller) {
          scope = $rootScope.$new();
        }
      );

      </code>

  section
    p Then, we'll use the
      strong  $controller
      |  service to instantiate our controller and supply the dependencies it needs.
    br
    pre.
      <code class="js" data-trim>
      controller('MainCtrl', function($scope) {

      });

      </code>
    pre.
      <code class="js" data-trim>
      inject(
        function($rootScope, $controller) {
          scope = $rootScope.$new();
          controller = $controller("MainCtrl", {
            $scope: scope
          });
        }
      )

      </code>

  section
    p If we needed to supply additional mock dependencies, we could do that here as well.
    br
    pre.
      <code class="js" data-trim>
      controller('MainCtrl', function($scope, person) {
        $scope.person = person;
      });

      </code>
    pre.
      <code class="js" data-trim>
      inject(
        function($rootScope, $controller) {
          scope = $rootScope.$new();
          controller = $controller("MainCtrl", {
            $scope: scope
            person: [{id: 1, name:'Cyril'}]
          });
        }
      )

      </code>

  section
    p Questions?

  section
    p Now that we have an instance of our controller, we can start testing it.

  section
    pre.
      <code class="js" data-trim>
      it('should be able to instantiate the controller', function () {
        expect(controller).to.be.ok;
      });

      it('should have person on scope', function () {
        expect(scope.person).to.be.ok;
      });

      </code>

  section
    h1 Lab Three
    h2 Karma Karma Karma Chameleon
